C++ gives programmers a high level of control over system resources and memory.

The main difference between C and C++ is that C++ support classes and objects, while C does not.





#include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}


    Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.

    Line 2: using namespace std means that we can use names for objects and variables from the standard library.

    Line 3: A blank line. C++ ignores white space. But we use it to make the code more readable.

    Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} will be executed

    Line 5: cout (pronounced "see-out") is an object used together with the insertion operator (<<) to output/print text. In our example it will output "Hello World".

    Note: Every C++ statement ends with a semicolon ;.

    Note: The body of int main() could also been written as:
    int main () { cout << "Hello World! "; return 0; }

    Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.

    Line 6: return 0 ends the main function.

    Line 7: Do not forget to add the closing curly bracket } to actually end the main function.



Omitting Namespace
You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects:

Example
#include <iostream>

int main() {
  std::cout << "Hello World!" << endl;
  return 0;
}

It is up to you if you want to include the standard namespace library or not.


#Both \n and endl are used to break lines. However, \n is most used.



To declare more than one variable of the same type, use a comma-separated list:

int x = 5, y = 6, z = 50;
cout << x + y + z;


Constants
When you do not want others (or yourself) to override existing variable values, use the const keyword (this will declare the variable as "constant", which means unchangeable and read-only):

const int minutesPerHour = 60;   // minutesPerHour will always be 60
const float Pi = 3.14;          // Pi will always be 3.14



float vs. double

The precision of a floating point value indicates how many digits the value can have after the decimal point. The precision of float is only six or seven decimal digits, while double variables have a precision of about 15 digits. Therefore it is safer to use double for most calculations.



Scientific Numbers
A floating point number can also be a scientific number with an "e" to indicate the power of 10:

int main() 
{
    int x, y, sum;
    
    float f1 = 35e3;
    double d1 = 12E4;
    cout << f1 << endl;
    cout << d1 << endl;
    return 0;
}





string fullName;
cout << "Type your full name: ";
cin >> fullName;
cout << "Your name is: " << fullName;

// Type your full name: John Doe
// Your name is: John


From the example above, you would expect the program to print "John Doe", but it only prints "John".

That's why, when working with strings, we often use the getline() function to read a line of text. It takes cin as the first parameter, and the string variable as second:

string fullName;
cout << "Type your full name: ";
getline (cin, fullName);
cout << "Your name is: " << fullName;

// Type your full name: John Doe
// Your name is: John Doe



C++ <cmath> Header
Other functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), can be found in the <cmath> header file:

Example
    // Include the cmath library
    #include <cmath>

    cout << sqrt(64);
    cout << round(2.6);
    cout << log(2);




Short Hand If...Else (Ternary Operator):

There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:

Syntax
variable = (condition) ? expressionTrue : expressionFalse;





C++ Switch Statements
Use the switch statement to select one of many code blocks to be executed.

We should use it in the place of adding so many if and else if block.


This is how it works:

The switch expression is evaluated once
The value of the expression is compared with the values of each case
If there is a match, the associated block of code is executed
The break and default keywords are optional


  char button;
  cout<< "Please type a button: ";
  cin >> button;
  
  
  switch (button) 
  {
    case 'a':
      cout << "Assalamu Alaikum";
      break;
    
    case 'b':
      cout << "Hello";
      break;
       
    default:
      cout << "I am still learning!";   
       
  }



The default Keyword
The default keyword specifies some code to run if there is no case match:




C++ While Loop
The while loop loops through a block of code as long as a specified condition is true:


The Do/While Loop
The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.



C++ For Loop
When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:


Syntax
for (statement 1; statement 2; statement 3) {
  // code block to be executed
}
Statement 1 is executed (one time) before the execution of the code block.

Statement 2 defines the condition for executing the code block.

Statement 3 is executed (every time) after the code block has been executed.




Break 

The break statement can also be used to jump out of a loop.

This example jumps out of the loop when i is equal to 4:

code on 

int main() {
  for (int i = 0; i < 10; i++) {
    if (i == 4) {
      break;
    }
    cout << i << "\n";

>>>
0
1
2
3


C++ Continue
The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

This example skips the value of 4:

int main() {
  for (int i = 0; i < 10; i++) {
    if (i == 4) {
      continue;
    }
    cout << i << "\n";
  }   
  return 0;
}

>>>
0
1
2
3
5
6
7
8
9



Continue in While Loop:

int i = 0;
while (i < 10) {
  if (i == 4) {
    i++;
    continue;
  }
  cout << i << "\n";
  i++;
}











